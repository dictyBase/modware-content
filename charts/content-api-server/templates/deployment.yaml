apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "content-api.fullname" . }}
  labels:
    app: {{ template "content-api.fullname" . }}
    chart: {{ template "content-api.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "content-api.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "content-api.fullname" . }}
        group: {{ .Values.group | quote }}
        provider: {{ .Values.provider | quote }}
        mode: {{ .Values.mode | quote }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: [
            "--log-level",
            "{{ .Values.logLevel }}",
            "start-server",
            "--dictycontent-db",
            $(DBNAME),
            "--dictycontent-user",
            $(USER),
            "--dictycontent-pass", 
            $(PASS),
            "--content-api-http-host",
            "{{ .Values.apiHost }}",
            "--port",
            "{{ .Values.service.port }}"
          ]
          env:
          - name: DBNAME
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.dictyContentPostgres.configMap.name }}"
                key: "{{ .Values.dictyContentPostgres.configMap.database }}"
          - name: USER
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.dictyContentPostgres.configMap.name }}"
                key: "{{ .Values.dictyContentPostgres.configMap.user }}"
          - name: PASS
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.dictyContentPostgres.secrets.name }}"
                key: "{{ .Values.dictyContentPostgres.secrets.password }}"
          ports:
          - name: {{ .Values.service.name | quote }}
            containerPort: {{ .Values.service.port }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: {{ .Values.service.port }}
            initialDelaySeconds: {{ .Values.healthCheck.initial }}
            timeoutSeconds: 1
            periodSeconds: {{ .Values.healthCheck.period }}
      {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
